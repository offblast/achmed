// Code generated by protoc-gen-go.
// source: achmed.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	achmed.proto

It has these top-level messages:
	ClientHelloInfo
	Certificate
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientHelloInfo struct {
	Ciphersuites    []uint32 `protobuf:"varint,1,rep,packed,name=ciphersuites" json:"ciphersuites,omitempty"`
	Servername      string   `protobuf:"bytes,2,opt,name=servername" json:"servername,omitempty"`
	Supportedcurves []uint32 `protobuf:"varint,3,rep,packed,name=supportedcurves" json:"supportedcurves,omitempty"`
	Supportedpoints []byte   `protobuf:"bytes,4,opt,name=supportedpoints,proto3" json:"supportedpoints,omitempty"`
}

func (m *ClientHelloInfo) Reset()                    { *m = ClientHelloInfo{} }
func (m *ClientHelloInfo) String() string            { return proto1.CompactTextString(m) }
func (*ClientHelloInfo) ProtoMessage()               {}
func (*ClientHelloInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Certificate is a concatentation of a private key PEM block followed by certificate pem blocks.
type Certificate struct {
	Pem []byte `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto1.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto1.RegisterType((*ClientHelloInfo)(nil), "proto.ClientHelloInfo")
	proto1.RegisterType((*Certificate)(nil), "proto.Certificate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Achmed service

type AchmedClient interface {
	GetCertificate(ctx context.Context, in *ClientHelloInfo, opts ...grpc.CallOption) (*Certificate, error)
}

type achmedClient struct {
	cc *grpc.ClientConn
}

func NewAchmedClient(cc *grpc.ClientConn) AchmedClient {
	return &achmedClient{cc}
}

func (c *achmedClient) GetCertificate(ctx context.Context, in *ClientHelloInfo, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/proto.Achmed/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Achmed service

type AchmedServer interface {
	GetCertificate(context.Context, *ClientHelloInfo) (*Certificate, error)
}

func RegisterAchmedServer(s *grpc.Server, srv AchmedServer) {
	s.RegisterService(&_Achmed_serviceDesc, srv)
}

func _Achmed_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHelloInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchmedServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Achmed/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchmedServer).GetCertificate(ctx, req.(*ClientHelloInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Achmed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Achmed",
	HandlerType: (*AchmedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificate",
			Handler:    _Achmed_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("achmed.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0xcf, 0xb1, 0x4a, 0xc7, 0x30,
	0x10, 0xc7, 0x71, 0x63, 0xf5, 0x0f, 0x9e, 0xd5, 0x4a, 0x06, 0x09, 0x0e, 0x5a, 0x32, 0x65, 0xea,
	0xa0, 0xbb, 0x20, 0x1d, 0xac, 0x6b, 0xdf, 0xa0, 0xa6, 0x57, 0x1a, 0x68, 0x93, 0x90, 0x5c, 0xfb,
	0x4e, 0xbe, 0xa5, 0x18, 0x11, 0xdb, 0x4e, 0x09, 0x1f, 0xbe, 0x1c, 0xfc, 0x20, 0xef, 0xf4, 0x38,
	0x63, 0x5f, 0xf9, 0xe0, 0xc8, 0xf1, 0xcb, 0xf4, 0xc8, 0x2f, 0x06, 0x45, 0x3d, 0x19, 0xb4, 0xd4,
	0xe0, 0x34, 0xb9, 0x0f, 0x3b, 0x38, 0x2e, 0x21, 0xd7, 0xc6, 0x8f, 0x18, 0xe2, 0x62, 0x08, 0xa3,
	0x60, 0x65, 0xa6, 0x6e, 0xda, 0x9d, 0xf1, 0x47, 0x80, 0x88, 0x61, 0xc5, 0x60, 0xbb, 0x19, 0xc5,
	0x79, 0xc9, 0xd4, 0x55, 0xbb, 0x11, 0xae, 0xa0, 0x88, 0x8b, 0xf7, 0x2e, 0x10, 0xf6, 0x7a, 0x09,
	0x2b, 0x46, 0x91, 0xa5, 0x33, 0x47, 0xde, 0x95, 0xde, 0x19, 0x4b, 0x51, 0x5c, 0x94, 0x4c, 0xe5,
	0xed, 0x91, 0xe5, 0x13, 0x5c, 0xd7, 0x18, 0xc8, 0x0c, 0x46, 0x77, 0x84, 0xfc, 0x0e, 0x32, 0x8f,
	0xb3, 0x60, 0x29, 0xfe, 0xf9, 0x3e, 0x37, 0x70, 0x7a, 0x4b, 0x1b, 0xf9, 0x2b, 0xdc, 0xbe, 0x23,
	0x6d, 0xeb, 0xfb, 0xdf, 0xdd, 0xd5, 0x61, 0xec, 0x03, 0xff, 0xf3, 0xff, 0x56, 0x9e, 0x7d, 0x9e,
	0x12, 0xbe, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0x29, 0x56, 0x07, 0xd2, 0x34, 0x01, 0x00, 0x00,
}
